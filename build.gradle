plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
    id 'com.github.johnrengelman.shadow' version '8.1.0'
}

group = 'WaterFun.WaterWood'
version = '1.3.0'

repositories {
    mavenCentral()
    maven {
        name = 'papermc'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven { url 'https://ci.lucko.me/repository/luckperms-repo/' }
}

dependencies {
    compileOnly 'com.velocitypowered:velocity-api:3.3.0-SNAPSHOT'
    compileOnly 'net.luckperms:api:5.4'
    annotationProcessor 'com.velocitypowered:velocity-api:3.3.0-SNAPSHOT'
    implementation 'org.yaml:snakeyaml:1.29'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'org.slf4j:jul-to-slf4j:2.0.12'
    implementation 'org.slf4j:slf4j-jdk14:2.0.12'
    implementation project(':WaterAPI')
}
shadowJar {
    dependencies {
        include(dependency('com.github.Danburen:WaterAPI:1.0.2')) // 指定要包含的库
        // 不使用排除的通配符，这里可以不需要排除其他依赖
    }
    manifest {
        attributes(
                'Main-Class': 'site.hjfunny.velochatx.VeloChatX' // 替换为您的主类
        )
    }
}
def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}
sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
